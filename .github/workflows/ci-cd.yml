name: CI/CD Pipeline

on:
  push:
    branches: [ main, testing, master ]
  pull_request:
    branches: [ main, testing, master ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f pyproject.toml ]; then
          pip install -e .
        fi

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run linters
      run: |
        echo "üîç Running code quality checks..."
        
        # Check for syntax errors
        python -m py_compile src/**/*.py
        
        # Run flake8
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
        # Check formatting with black
        black --check src/ tests/
        
        # Check import sorting
        isort --check-only src/ tests/
        
        echo "‚úÖ All linting checks passed"

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        echo "üîí Running security checks..."
        
        # Run bandit for security vulnerabilities
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Check for known vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
        
        echo "‚úÖ Security checks completed"

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/testing'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "üì¶ Building package..."
        python -m build
        
        echo "‚úÖ Build completed successfully"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/testing'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, deploy-docs]
    if: always()
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå CI/CD pipeline failed!"
        echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ CI/CD pipeline completed successfully!"
        echo "All checks passed and deployment completed." 